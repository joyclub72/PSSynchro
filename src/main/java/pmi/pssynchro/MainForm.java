package pmi.pssynchro;

import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URLConnection;
import java.net.URL;
import java.net.MalformedURLException;
import java.awt.*;
import java.awt.event.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.TimeUnit;
import java.util.logging.FileHandler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.SwingUtilities;
import org.apache.commons.net.PrintCommandListener;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPConnectionClosedException;
import org.apache.commons.net.ftp.FTPReply;
import org.apache.commons.net.ftp.FTPSClient;
import org.apache.commons.net.io.CopyStreamAdapter;

public class MainForm extends javax.swing.JFrame {

    public static Integer tryParse(String text) {
        try {
            return Integer.parseInt(text);
        } catch (NumberFormatException e) {
            return 0;
        }
    }

    boolean stopped = false;
    public static Timer timer;
    String sUrl = Config.getString("URL");
    int magRitardo = tryParse((Config.getString("MAGAZZINO") + "000")) * 60;    //ritardo aggiornamento magazzino esterno
    int giacRitardo = tryParse((Config.getString("GIACENZA") + "000")) * 60;
    int cliRitardo = tryParse((Config.getString("CLIENTI") + "000")) * 60;
    int artRitardo = tryParse((Config.getString("ARTICOLI") + "000")) * 60;
    int forRitardo = tryParse((Config.getString("FORNITORI") + "000")) * 60;
    int immRitardo = tryParse((Config.getString("IMMAGINI") + "000")) * 60;
    int allRitardo = tryParse((Config.getString("ALLEGATI") + "000")) * 60;
    int scaRitardo = tryParse((Config.getString("SCADENZARIO") + "000")) * 60;
    int staRitardo = tryParse((Config.getString("STATISTICHE") + "000")) * 60;
    int marRitardo = tryParse((Config.getString("MARCHE") + "000")) * 60;
    int ordRitardo = tryParse((Config.getString("ORDINI") + "000")) * 60;
    int linRitardo = tryParse((Config.getString("LINGUE") + "000")) * 60;
    int lisRitardo = tryParse((Config.getString("LISTINI") + "000")) * 60;
    int clearEvery = tryParse((Config.getString("PULIZIAAREA") + "000")) * 60;
    String catPs = Config.getString("CATEGORIEPS");
    String checkStream = Config.getString("MOSTRASTREAM");
    Date dataErrore;

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        this.getContentPane().setBackground(Color.getHSBColor(Costanti.HUE, Costanti.SATURATION, Costanti.BRIGHTNESS));
        if (checkStream.equals("1")){
            mostraStream.setSelected(true);
        }
        else {
            mostraStream.setSelected(false);
        }
        ScheduleAllTasks schedulatasks = new ScheduleAllTasks();
        schedulatasks.start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0));
        jScrollPane1 = new javax.swing.JScrollPane();
        esito = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        sysTray = new javax.swing.JButton();
        mostraStream = new javax.swing.JRadioButton();
        stop = new javax.swing.JButton();
        start = new javax.swing.JButton();
        config = new javax.swing.JButton();
        esci = new javax.swing.JButton();
        soloArticoliNuovi = new javax.swing.JRadioButton();
        resetListini = new javax.swing.JRadioButton();
        clearArea = new javax.swing.JButton();
        stato = new javax.swing.JLabel();
        ftpProgressBar = new javax.swing.JProgressBar();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        runOnceArt = new javax.swing.JButton();
        runOnceMar = new javax.swing.JButton();
        runOnceSta = new javax.swing.JButton();
        runOnceFor = new javax.swing.JButton();
        runOnceCli = new javax.swing.JButton();
        runOnceAll = new javax.swing.JButton();
        runOnceLis = new javax.swing.JButton();
        runOnceImm = new javax.swing.JButton();
        runOnceOrd = new javax.swing.JButton();
        runOnceLin = new javax.swing.JButton();
        runOnceSca = new javax.swing.JButton();
        runOnceGiac = new javax.swing.JButton();
        runOnceMagEst = new javax.swing.JButton();
        runOnceCodRif = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("PrestaShopSync");
        setMinimumSize(new java.awt.Dimension(730, 480));

        esito.setColumns(20);
        esito.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        esito.setLineWrap(true);
        esito.setRows(5);
        esito.setMargin(new java.awt.Insets(2, 4, 2, 4));
        jScrollPane1.setViewportView(esito);
        esito.getAccessibleContext().setAccessibleParent(esito);

        jPanel1.setBackground(Color.getHSBColor(Costanti.HUE,Costanti.SATURATION,Costanti.BRIGHTNESS));

        sysTray.setBackground(java.awt.Color.white);
        sysTray.setIcon(new javax.swing.ImageIcon(getClass().getResource("/to_tray.png"))); // NOI18N
        sysTray.setToolTipText("System Tray");
        sysTray.setFocusable(false);
        sysTray.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sysTray.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        sysTray.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sysTrayActionPerformed(evt);
            }
        });

        mostraStream.setBackground(Color.getHSBColor(Costanti.HUE,Costanti.SATURATION,Costanti.BRIGHTNESS));
        mostraStream.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        mostraStream.setSelected(true);
        mostraStream.setText("Mostra Stream");

        stop.setBackground(java.awt.Color.white);
        stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/stop.png"))); // NOI18N
        stop.setToolTipText("Stop");
        stop.setFocusable(false);
        stop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        start.setBackground(java.awt.Color.white);
        start.setIcon(new javax.swing.ImageIcon(getClass().getResource("/start.png"))); // NOI18N
        start.setToolTipText("Start");
        start.setFocusable(false);
        start.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        start.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        config.setBackground(java.awt.Color.white);
        config.setIcon(new javax.swing.ImageIcon(getClass().getResource("/config.png"))); // NOI18N
        config.setToolTipText("Configura");
        config.setFocusable(false);
        config.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        config.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        config.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configActionPerformed(evt);
            }
        });

        esci.setBackground(java.awt.Color.white);
        esci.setIcon(new javax.swing.ImageIcon(getClass().getResource("/exit.png"))); // NOI18N
        esci.setToolTipText("Esci");
        esci.setFocusable(false);
        esci.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        esci.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        esci.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                esciActionPerformed(evt);
            }
        });

        soloArticoliNuovi.setBackground(Color.getHSBColor(Costanti.HUE,Costanti.SATURATION,Costanti.BRIGHTNESS));
        soloArticoliNuovi.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        soloArticoliNuovi.setText("Articoli nuovi o modificati");
        soloArticoliNuovi.setToolTipText("Aggiorna solo gli articoli nuovi o che hanno subito modifiche");
        soloArticoliNuovi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soloArticoliNuoviActionPerformed(evt);
            }
        });

        resetListini.setBackground(Color.getHSBColor(Costanti.HUE,Costanti.SATURATION,Costanti.BRIGHTNESS));
        resetListini.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        resetListini.setText("Reset Listini");
        resetListini.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetListiniActionPerformed(evt);
            }
        });

        clearArea.setBackground(java.awt.Color.white);
        clearArea.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        clearArea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/clean.png"))); // NOI18N
        clearArea.setToolTipText("Pulisci Text Area");
        clearArea.setMaximumSize(new java.awt.Dimension(62, 48));
        clearArea.setMinimumSize(new java.awt.Dimension(62, 48));
        clearArea.setPreferredSize(new java.awt.Dimension(62, 48));
        clearArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAreaActionPerformed(evt);
            }
        });

        stato.setMaximumSize(new java.awt.Dimension(45, 16));
        stato.setMinimumSize(new java.awt.Dimension(45, 16));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stop, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sysTray, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(esci, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mostraStream, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(soloArticoliNuovi, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(resetListini, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stato, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ftpProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(clearArea, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(config, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(soloArticoliNuovi)
                            .addComponent(resetListini)
                            .addComponent(stato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ftpProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(mostraStream, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(stop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sysTray, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(esci, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(start, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(config, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearArea, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)))
        );

        jLayeredPane1.setAutoscrolls(true);

        runOnceArt.setBackground(java.awt.Color.white);
        runOnceArt.setText("Articoli");
        runOnceArt.setMaximumSize(new java.awt.Dimension(70, 20));
        runOnceArt.setMinimumSize(new java.awt.Dimension(70, 20));
        runOnceArt.setPreferredSize(new java.awt.Dimension(70, 20));
        runOnceArt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runOnceArtActionPerformed(evt);
            }
        });

        runOnceMar.setBackground(java.awt.Color.white);
        runOnceMar.setText("Marche");
        runOnceMar.setMaximumSize(new java.awt.Dimension(70, 20));
        runOnceMar.setMinimumSize(new java.awt.Dimension(70, 20));
        runOnceMar.setPreferredSize(new java.awt.Dimension(70, 20));
        runOnceMar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runOnceMarActionPerformed(evt);
            }
        });

        runOnceSta.setBackground(java.awt.Color.white);
        runOnceSta.setText("Statistiche");
        runOnceSta.setMargin(new java.awt.Insets(2, 8, 2, 8));
        runOnceSta.setMaximumSize(new java.awt.Dimension(70, 20));
        runOnceSta.setMinimumSize(new java.awt.Dimension(70, 20));
        runOnceSta.setPreferredSize(new java.awt.Dimension(70, 20));
        runOnceSta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runOnceStaActionPerformed(evt);
            }
        });

        runOnceFor.setBackground(java.awt.Color.white);
        runOnceFor.setText("Fornitori");
        runOnceFor.setMaximumSize(new java.awt.Dimension(70, 20));
        runOnceFor.setMinimumSize(new java.awt.Dimension(70, 20));
        runOnceFor.setPreferredSize(new java.awt.Dimension(70, 20));
        runOnceFor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runOnceForActionPerformed(evt);
            }
        });

        runOnceCli.setBackground(java.awt.Color.white);
        runOnceCli.setText("Clienti");
        runOnceCli.setMaximumSize(new java.awt.Dimension(70, 20));
        runOnceCli.setMinimumSize(new java.awt.Dimension(70, 20));
        runOnceCli.setPreferredSize(new java.awt.Dimension(70, 20));
        runOnceCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runOnceCliActionPerformed(evt);
            }
        });

        runOnceAll.setBackground(java.awt.Color.white);
        runOnceAll.setText("Allegati");
        runOnceAll.setMaximumSize(new java.awt.Dimension(70, 20));
        runOnceAll.setMinimumSize(new java.awt.Dimension(70, 20));
        runOnceAll.setPreferredSize(new java.awt.Dimension(70, 20));
        runOnceAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runOnceAllActionPerformed(evt);
            }
        });

        runOnceLis.setBackground(java.awt.Color.white);
        runOnceLis.setText("Listini");
        runOnceLis.setMaximumSize(new java.awt.Dimension(70, 20));
        runOnceLis.setMinimumSize(new java.awt.Dimension(70, 20));
        runOnceLis.setPreferredSize(new java.awt.Dimension(70, 20));
        runOnceLis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runOnceLisActionPerformed(evt);
            }
        });

        runOnceImm.setBackground(java.awt.Color.white);
        runOnceImm.setText("Immagini");
        runOnceImm.setMaximumSize(new java.awt.Dimension(70, 20));
        runOnceImm.setMinimumSize(new java.awt.Dimension(70, 20));
        runOnceImm.setPreferredSize(new java.awt.Dimension(70, 20));
        runOnceImm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runOnceImmActionPerformed(evt);
            }
        });

        runOnceOrd.setBackground(java.awt.Color.white);
        runOnceOrd.setText("Ordini");
        runOnceOrd.setMaximumSize(new java.awt.Dimension(70, 20));
        runOnceOrd.setMinimumSize(new java.awt.Dimension(70, 20));
        runOnceOrd.setPreferredSize(new java.awt.Dimension(70, 20));
        runOnceOrd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runOnceOrdActionPerformed(evt);
            }
        });

        runOnceLin.setBackground(java.awt.Color.white);
        runOnceLin.setText("Lingue");
        runOnceLin.setMaximumSize(new java.awt.Dimension(70, 20));
        runOnceLin.setMinimumSize(new java.awt.Dimension(70, 20));
        runOnceLin.setPreferredSize(new java.awt.Dimension(70, 20));
        runOnceLin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runOnceLinActionPerformed(evt);
            }
        });

        runOnceSca.setBackground(java.awt.Color.white);
        runOnceSca.setText("Scadenze");
        runOnceSca.setMaximumSize(new java.awt.Dimension(70, 20));
        runOnceSca.setMinimumSize(new java.awt.Dimension(70, 20));
        runOnceSca.setPreferredSize(new java.awt.Dimension(70, 20));
        runOnceSca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runOnceScaActionPerformed(evt);
            }
        });

        runOnceGiac.setBackground(java.awt.Color.white);
        runOnceGiac.setText("Giacenze");
        runOnceGiac.setMaximumSize(new java.awt.Dimension(70, 20));
        runOnceGiac.setMinimumSize(new java.awt.Dimension(70, 20));
        runOnceGiac.setPreferredSize(new java.awt.Dimension(70, 20));
        runOnceGiac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runOnceGiacActionPerformed(evt);
            }
        });

        runOnceMagEst.setBackground(java.awt.Color.white);
        runOnceMagEst.setText("Mag. Est.");
        runOnceMagEst.setMaximumSize(new java.awt.Dimension(70, 20));
        runOnceMagEst.setMinimumSize(new java.awt.Dimension(70, 20));
        runOnceMagEst.setPreferredSize(new java.awt.Dimension(70, 20));
        runOnceMagEst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runOnceMagEstActionPerformed(evt);
            }
        });

        runOnceCodRif.setBackground(java.awt.Color.white);
        runOnceCodRif.setText("Cod. Rif.");
        runOnceCodRif.setMaximumSize(new java.awt.Dimension(70, 20));
        runOnceCodRif.setMinimumSize(new java.awt.Dimension(70, 20));
        runOnceCodRif.setPreferredSize(new java.awt.Dimension(70, 20));
        runOnceCodRif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runOnceCodRifActionPerformed(evt);
            }
        });

        jLayeredPane1.setLayer(runOnceArt, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(runOnceMar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(runOnceSta, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(runOnceFor, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(runOnceCli, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(runOnceAll, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(runOnceLis, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(runOnceImm, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(runOnceOrd, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(runOnceLin, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(runOnceSca, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(runOnceGiac, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(runOnceMagEst, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(runOnceCodRif, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(runOnceMar, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(runOnceSta, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(runOnceLis, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(runOnceOrd, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(runOnceLin, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(runOnceSca, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(runOnceMagEst, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(runOnceImm, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(runOnceArt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(runOnceFor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(runOnceCli, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(runOnceAll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(runOnceGiac, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(runOnceCodRif, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addComponent(runOnceArt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runOnceMar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runOnceSta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runOnceFor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runOnceCli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runOnceAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runOnceLis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runOnceImm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runOnceOrd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runOnceLin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runOnceSca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runOnceGiac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runOnceMagEst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runOnceCodRif, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLayeredPane1)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
// Gestione della riduzione a System tray

    private void sysTrayActionPerformed(java.awt.event.ActionEvent evt) {
        Systray systray = new Systray();
        systray.systrayit();
    }

    // Redirect dei messaggi di sistema su jtextarea
    private void updateTextArea(final String text) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                esito.append(text);
                // Replico il testo anche in un file di log
                try (FileWriter fw = new FileWriter("log.txt", true);
                        BufferedWriter bw = new BufferedWriter(fw);
                        PrintWriter out = new PrintWriter(bw)) {
                    out.println(text);
                } catch (IOException e) {
                }
                //
            }
        });
    }

    private void redirectSystemStreams() {
        OutputStream out = new OutputStream() {
            @Override
            public void write(int b) throws IOException {
                updateTextArea(String.valueOf((char) b));
            }

            @Override
            public void write(byte[] b, int off, int len) throws IOException {
                updateTextArea(new String(b, off, len));
            }

            @Override
            public void write(byte[] b) throws IOException {
                write(b, 0, b.length);
            }
        };
        System.setOut(new PrintStream(out, true));
        System.setErr(new PrintStream(out, true));
    }
    //Fine Gestione redirect messaggi di sistema (viene eseguito richiamando redirectSystemStreams(); )


    private void clearAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAreaActionPerformed
        esito.setText("");
    }//GEN-LAST:event_clearAreaActionPerformed

    private void soloArticoliNuoviActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soloArticoliNuoviActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_soloArticoliNuoviActionPerformed

    private void runOnceLisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runOnceLisActionPerformed
        timer = new Timer();
        timer.schedule(new TaskSchedulato("arlistini"), 10);
    }//GEN-LAST:event_runOnceLisActionPerformed

    private void runOnceMagEstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runOnceMagEstActionPerformed
        timer = new Timer();
        timer.schedule(new TaskSchedulato("magazzinoesterno"), 10);
    }//GEN-LAST:event_runOnceMagEstActionPerformed

    private void esciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_esciActionPerformed
        System.exit(0);
    }//GEN-LAST:event_esciActionPerformed

    private void runOnceAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runOnceAllActionPerformed
        timer = new Timer();
        timer.schedule(new TaskSchedulato("arallegati"), 10);
    }//GEN-LAST:event_runOnceAllActionPerformed

    private void runOnceLinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runOnceLinActionPerformed
        timer = new Timer();
        timer.schedule(new TaskSchedulato("arlingue"), 10);
    }//GEN-LAST:event_runOnceLinActionPerformed

    private void configActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configActionPerformed
        Configurazione form = new Configurazione();
        form.setVisible(true);
    }//GEN-LAST:event_configActionPerformed

    private void runOnceMarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runOnceMarActionPerformed
        timer = new Timer();
        timer.schedule(new TaskSchedulato("armarche"), 10);
    }//GEN-LAST:event_runOnceMarActionPerformed

    private void runOnceCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runOnceCliActionPerformed
        timer = new Timer();
        timer.schedule(new TaskSchedulato("arclienti"), 10);
    }//GEN-LAST:event_runOnceCliActionPerformed

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        ScheduleAllTasks schedulatasks = new ScheduleAllTasks();
        schedulatasks.start();
    }//GEN-LAST:event_startActionPerformed

    private void runOnceForActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runOnceForActionPerformed
        timer = new Timer();
        timer.schedule(new TaskSchedulato("arfornitori"), 10);
    }//GEN-LAST:event_runOnceForActionPerformed

    private void runOnceImmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runOnceImmActionPerformed
        timer = new Timer();
        timer.schedule(new FtpImmagini("arimmagini"), 10);
    }//GEN-LAST:event_runOnceImmActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        ScheduleAllTasks schedulatasks = new ScheduleAllTasks();
        schedulatasks.stop();
    }//GEN-LAST:event_stopActionPerformed

    private void runOnceArtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runOnceArtActionPerformed
        timer = new Timer();
        timer.schedule(new TaskSchedulato("ararticoli"), 10);
    }//GEN-LAST:event_runOnceArtActionPerformed

    private void runOnceGiacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runOnceGiacActionPerformed
        timer = new Timer();
        timer.schedule(new TaskSchedulato("argiacenze"), 10);
    }//GEN-LAST:event_runOnceGiacActionPerformed

    private void runOnceStaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runOnceStaActionPerformed
        timer = new Timer();
        timer.schedule(new TaskSchedulato("arstatistiche"), 10);
    }//GEN-LAST:event_runOnceStaActionPerformed

    private void runOnceScaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runOnceScaActionPerformed
        timer = new Timer();
        timer.schedule(new TaskSchedulato("arscadenzario"), 10);
    }//GEN-LAST:event_runOnceScaActionPerformed
//GEN-FIRST:event_sysTrayActionPerformed
//GEN-LAST:event_sysTrayActionPerformed
    private void runOnceOrdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runOnceOrdActionPerformed
        timer = new Timer();
        timer.schedule(new TaskSchedulato("arordini"), 10);
    }//GEN-LAST:event_runOnceOrdActionPerformed

    private void resetListiniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetListiniActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resetListiniActionPerformed

    private void runOnceCodRifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runOnceCodRifActionPerformed
        timer = new Timer();
        timer.schedule(new TaskSchedulato("arCodRif"), 10);
    }//GEN-LAST:event_runOnceCodRifActionPerformed

    /**
     * @param args the command line arguments
     */
    public void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearArea;
    private javax.swing.JButton config;
    private javax.swing.JButton esci;
    private javax.swing.JTextArea esito;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JProgressBar ftpProgressBar;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton mostraStream;
    private javax.swing.JRadioButton resetListini;
    private javax.swing.JButton runOnceAll;
    private javax.swing.JButton runOnceArt;
    private javax.swing.JButton runOnceCli;
    private javax.swing.JButton runOnceCodRif;
    private javax.swing.JButton runOnceFor;
    private javax.swing.JButton runOnceGiac;
    private javax.swing.JButton runOnceImm;
    private javax.swing.JButton runOnceLin;
    private javax.swing.JButton runOnceLis;
    private javax.swing.JButton runOnceMagEst;
    private javax.swing.JButton runOnceMar;
    private javax.swing.JButton runOnceOrd;
    private javax.swing.JButton runOnceSca;
    private javax.swing.JButton runOnceSta;
    private javax.swing.JRadioButton soloArticoliNuovi;
    public javax.swing.JButton start;
    private javax.swing.JLabel stato;
    private javax.swing.JButton stop;
    private javax.swing.JButton sysTray;
    // End of variables declaration//GEN-END:variables

    class TaskSchedulato extends TimerTask {

        String stringa;
        String all;
        String resLis;
        String cPs;

        public TaskSchedulato(String stringa) {
            this.stringa = stringa;
            // verifica flag aggiornamento Articoli, se tutti o solo  i nuovi
            if (soloArticoliNuovi.isSelected()) {
                all = "&all=1";
            } else {
                all = "&all=0";
            }
            // verifica flag reset listini
            if (resetListini.isSelected()) {
                resLis = "&resetLis=1";
            } else {
                resLis = "&resetLis=0";
            }
            // verifica flag Categorie Ps. Se attivo dico alla pagina php di non aggiornarle, altrimenti di farlo
            if (catPs.equals("1")) {
                cPs = "&cps=1";
            } else {
                cPs = "&cps=0";
            }

        }

        @Override
        public synchronized void run() {
            Buttons buttons = new Buttons();
            buttons.disable(); //disabilito i buttons
            redirectSystemStreams();
            DateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
            URL sito = null;
            System.out.println("Procedura: " + stringa);
            // Carico le informazioni di collegamento a SQL            
            String server = Config.getString("SERVER");
            server = "jdbc:sqlserver://" + server;
            String database = Config.getString("DATABASE");
            server = server + ";mydb=" + database;
            String username = Config.getString("USERNAME");
            String password = Config.getString("PASSWORD");
            String ftp = Config.getString("FTP");
            String userFtp = Config.getString("USERNAME_FTP");
            String pwdFtp = Config.getString("PASSWORD_FTP");
            String percorsoRemotoFtp = Config.getString("SCAMBIO_FTP");
            String checkImg = Config.getString("URL_CHECK_IMMAGINI");
            final String percorsoImgFtp = Config.getString("PERCORSO_IMMAGINE_FTP");
            final String nomeImgFtp = Config.getString("IMMAGINE_FTP");

            //Aggiorno le categorie web            
            if (stringa.equals("ararticoli") && catPs.equals("1")) {
                UpdateCategoriePs connServer = new UpdateCategoriePs();
                connServer.dbConnect(server, username, password, database);
            }
            //
            // Carico i dati del magazzino esterno 
            if (stringa.equals("magazzinoesterno")) {
                UpdateMagazzinoEsternoPS connServerMag = new UpdateMagazzinoEsternoPS();
                connServerMag.dbConnect(server, username, password, database);
                buttons.enable(); //riabilito i buttons
                return;
            }
            //

            // Upload delle immagini 
            if (stringa.equals("arimmagini")) {

                try {
                    UploadImmagini updImg = new UploadImmagini();
                    updImg.FtpUpload(ftp, userFtp, pwdFtp, percorsoRemotoFtp, percorsoImgFtp, nomeImgFtp, all, checkImg);
                    buttons.enable(); //riabilito i buttons
                    return;
                } catch (NoSuchAlgorithmException ex) {
                    System.out.println(ex);
                } catch (InterruptedException ex) {
                    System.out.println(ex);
                }
            }
            //

            try {
                sito = new URL(sUrl + "?aggiornamento=" + stringa + all + resLis + cPs);
            } catch (MalformedURLException ex) {
                System.out.println("Indirizzo del sito mal formato o inesistente");
            }
            URLConnection yc = null;
            try {
                yc = sito.openConnection();
                System.out.println(sito + " - Apertura connessione");/*test*/
            } catch (IOException ex) {
                System.out.println("Errore di connessione _ ");
            }
            //BufferedReader in;
            try (BufferedReader in = new BufferedReader(new InputStreamReader(yc.getInputStream()))){
                
                System.out.println(sito + " - Comunicazione");/*test*/
            } catch (IOException ex) {
                dataErrore = new Date();
                System.out.println(sdf.format(dataErrore) + ": Errore in ricezione dati: verificare che il "
                        + "server sia avviato o che l'indirizzo sia corretto");
                buttons.enable(); //riabilito i buttons
                return;
            }
            //potrebbe bloccare la form
            if (mostraStream.isSelected()) {
                String inputLine;
                try (BufferedReader in = new BufferedReader(new InputStreamReader(yc.getInputStream()))){
                    System.out.println(sito + " - Mostra stream");/*test*/
                    while ((inputLine = in.readLine()) != null) {
                        System.out.println(inputLine);
                    }
                } catch (IOException ex) {
                    dataErrore = new Date();
                    System.out.println(sdf.format(dataErrore));
                    System.out.println("Errore di connessione: " + dataErrore);
                }
            }
            //potrebbe bloccare la form - Fine
            try (BufferedReader in = new BufferedReader(new InputStreamReader(yc.getInputStream()))){
                System.out.println(sito + " - Chiusura");/*test*/
                in.close();
            } catch (IOException ex) {
                System.out.println("errore in chiusura");
            }
            buttons.enable(); //riabilito i buttons
        }
    }

    class TaskClear extends TimerTask {

        @Override
        public void run() {
            esito.setText("");
            try (FileWriter fw = new FileWriter("log.txt", false);
                    BufferedWriter bw = new BufferedWriter(fw);
                    PrintWriter out = new PrintWriter(bw)) {
                out.println("");
            } catch (IOException e) {
            }
        }
    }

//Upload Immagini via Ftp
    class FtpImmagini extends TimerTask {

        String stringa;
        String all;

        public FtpImmagini(String stringa) {
            this.stringa = stringa;
            // verifica flag aggiornamento Articoli, se tutti o solo  i nuovi
            if (soloArticoliNuovi.isSelected()) {
                all = "&all=1";
            } else {
                all = "&all=0";
            }
        }

        @Override
        public synchronized void run() {
            Buttons buttons = new Buttons();
            buttons.disable(); //disabilito i buttons
            redirectSystemStreams();
            DateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
            URL sito = null;
            System.out.println("Procedura: " + stringa);

            String ftp = Config.getString("FTP");
            String userFtp = Config.getString("USERNAME_FTP");
            String pwdFtp = Config.getString("PASSWORD_FTP");
            String percorsoRemotoFtp = Config.getString("SCAMBIO_FTP");
            String checkImg = Config.getString("URL_CHECK_IMMAGINI");
            final String percorsoImgFtp = Config.getString("PERCORSO_IMMAGINE_FTP");
            final String nomeImgFtp = Config.getString("IMMAGINE_FTP");
            boolean storeFile = false, binaryTransfer = false, error = false;
            final String remote;
            final String local;
            String protocol = "TLS";    // SSL/TLS
            FTPSClient ftps;
            storeFile = true;
            binaryTransfer = true;
            String sUrl = Config.getString("URL");
            local = percorsoImgFtp.concat(nomeImgFtp);
            final File file = new File(local);
            remote = nomeImgFtp;
            ftps = new FTPSClient(protocol);
            ftps.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out)));
            URLConnection yc = null;
            BufferedReader in;

            // Upload delle immagini 
            CopyStreamAdapter streamListener = new CopyStreamAdapter() {

                @Override
                public void bytesTransferred(long totalBytesTransferred, int bytesTransferred, long streamSize) {
                    //this method will be called everytime some bytes are transferred
                    int percent = (int) (totalBytesTransferred * 100 / file.length());
                    // update your progress bar with this percentage
                    ftpProgressBar.setValue(percent);
                }

            };
            /*Stampe di test*/
            System.out.println("Percorso locale: " + percorsoImgFtp);
            System.out.println("File di check: " + checkImg + " - Esiste? " + Varie.esiste(checkImg));
            System.out.println("File immagine locale: " + local + " - Esiste? " + Varie.esisteFile(local));
            /*Fine stampe di test*/

            if (!(Varie.esiste(checkImg)) && !(Varie.esisteFile(local))) {
                /* Procedo solo se non esiste il file ok.txt e il file imageFTP*/
 /* Prima richiesta di generazione immagini da caricare */

                try {
                    sito = new URL(sUrl + "?aggiornamento=arimmagini1" + all);
                } catch (MalformedURLException ex) {
                    System.out.println("Indirizzo del sito mal formato o inesistente");
                }

                try {
                    yc = sito.openConnection();
                    System.out.println(sito + " - Apertura connessione");/*test*/
                } catch (IOException ex) {
                    System.out.println("Errore di connessione _ ");
                }

                try {
                    in = new BufferedReader(new InputStreamReader(yc.getInputStream()));
                    System.out.println(sito + " - Comunicazione");/*test*/
                } catch (IOException ex) {
                    System.out.println(": Errore in ricezione dati: verificare che il "
                            + "server sia avviato o che l'indirizzo sia corretto");
                    return;
                }

                /*Verifico l'esistenza del file di check che mi informa che posso proseguire*/
                while (!(Varie.esiste(checkImg))) {
                    System.out.print("-");
                    try {
                        TimeUnit.SECONDS.sleep(5);
                    } catch (InterruptedException ex) {

                    }
                }

            }
            /*Procedura di upload vera e propria*/

            try {
                int reply;

                ftps.connect(ftp);
                System.out.println("Connesso a " + ftp + ".");

                // After connection attempt, you should check the reply code to verify
                // success.
                reply = ftps.getReplyCode();

                if (!FTPReply.isPositiveCompletion(reply)) {
                    ftps.disconnect();
                    System.err.println("Il server FTP ha rifiutato la connessione.");
                }
            } catch (IOException e) {
                if (ftps.isConnected()) {
                    try {
                        ftps.disconnect();
                    } catch (IOException f) {
                        // do nothing
                    }
                }
                System.err.println("Non riesco a collegarmi al server FTP.");
            }

            __main:
            try {
                ftps.setBufferSize(1000);

                if (!ftps.login(userFtp, pwdFtp)) {
                    ftps.logout();
                    error = true;
                    break __main;
                }

                ftps.changeWorkingDirectory(percorsoRemotoFtp);
                System.out.println("Remote system is " + ftps.getSystemName());

                if (binaryTransfer) {
                    ftps.setFileType(FTP.BINARY_FILE_TYPE);
                }

                // Use passive mode as default because most of us are
                // behind firewalls these days.
                ftps.enterLocalPassiveMode();

                if (storeFile) {
                    /*upload*/
                    System.out.println("Il file esiste");
                    InputStream input;
                    input = new FileInputStream(local);
                    ftps.setControlKeepAliveTimeout(180); // set timeout to 3 minutes
                    ftps.setCopyStreamListener(streamListener);
                    ftps.storeFile(remote, input);
                    input.close();
                    System.out.println("Upload terminato");

                }

                ftps.logout();
            } catch (FTPConnectionClosedException e) {
                error = true;
                System.err.println("Server closed connection.");
            } catch (IOException e) {
                error = true;
            } finally {
                if (ftps.isConnected()) {
                    try {
                        ftps.disconnect();
                        System.out.println("Disconnessione effettuata");
                    } catch (IOException f) {
                        // do nothing
                    }

                }
            }
            try {
                sito = new URL(sUrl + "?aggiornamento=arimmagini2" + all);
            } catch (MalformedURLException ex) {
                System.out.println("Indirizzo del sito mal formato o inesistente");
            }
            try {
                yc = sito.openConnection();
                System.out.println(sito + " - Apertura connessione");/*test*/
            } catch (IOException ex) {
                System.out.println("Errore di connessione _ ");
            }
            try {
                in = new BufferedReader(new InputStreamReader(yc.getInputStream()));
                System.out.println(sito + " - Comunicazione");/*test*/
            } catch (IOException ex) {
                System.out.println(": Errore in ricezione dati: verificare che il "
                        + "server sia avviato o che l'indirizzo sia corretto");
            }       //System.exit(error ? 1 : 0);
            /*Fine procedura upload vera e propria*/
            buttons.enable(); //riabilito i buttons
        } // end main    

    }

    class Buttons {

        public void disable() {
            runOnceAll.setEnabled(false);
            runOnceArt.setEnabled(false);
            runOnceCli.setEnabled(false);
            runOnceFor.setEnabled(false);
            runOnceGiac.setEnabled(false);
            runOnceImm.setEnabled(false);
            runOnceLin.setEnabled(false);
            runOnceLis.setEnabled(false);
            runOnceMagEst.setEnabled(false);
            runOnceMar.setEnabled(false);
            runOnceOrd.setEnabled(false);
            runOnceSca.setEnabled(false);
            runOnceSta.setEnabled(false);
            runOnceCodRif.setEnabled(false);
        }

        public void enable() {
            runOnceAll.setEnabled(true);
            runOnceArt.setEnabled(true);
            runOnceCli.setEnabled(true);
            runOnceFor.setEnabled(true);
            runOnceGiac.setEnabled(true);
            runOnceImm.setEnabled(true);
            runOnceLin.setEnabled(true);
            runOnceLis.setEnabled(true);
            runOnceMagEst.setEnabled(true);
            runOnceMar.setEnabled(true);
            runOnceOrd.setEnabled(true);
            runOnceSca.setEnabled(true);
            runOnceSta.setEnabled(true);
            runOnceCodRif.setEnabled(true);
        }

    }

    class ScheduleAllTasks {

        public void start() {
            start.setBackground(Color.green);
            stop.setBackground(Color.white);
            if (stopped) {
                timer.cancel();
            }
            stopped = false;
            stato.setText("Avviato");
            timer = new Timer();
            if (giacRitardo > 0) {
                timer.schedule(new TaskSchedulato("argiacenze"), giacRitardo, giacRitardo);//parti dopo x secondi e itera ogni x secondi
            }
            if (cliRitardo > 0) {
                timer.schedule(new TaskSchedulato("arclienti"), cliRitardo, cliRitardo);//parti dopo x secondi e itera ogni x secondi
            }
            if (artRitardo > 0) {
                timer.schedule(new TaskSchedulato("ararticoli"), artRitardo, artRitardo);//parti dopo x secondi e itera ogni x secondi
            }
            if (forRitardo > 0) {
                timer.schedule(new TaskSchedulato("arfornitori"), forRitardo, forRitardo);//parti dopo x secondi e itera ogni x secondi
            }
            if (scaRitardo > 0) {
                timer.schedule(new TaskSchedulato("arscadenze"), scaRitardo, scaRitardo);//parti dopo x secondi e itera ogni x secondi
            }
            if (staRitardo > 0) {
                timer.schedule(new TaskSchedulato("arstatistiche"), staRitardo, staRitardo);//parti dopo x secondi e itera ogni x secondi
            }
            if (ordRitardo > 0) {
                timer.schedule(new TaskSchedulato("arordini"), ordRitardo, ordRitardo);//parti dopo x secondi e itera ogni x secondi
            }
            if (marRitardo > 0) {
                timer.schedule(new TaskSchedulato("armarche"), marRitardo, marRitardo);//parti dopo x secondi e itera ogni x secondi
            }
            if (linRitardo > 0) {
                timer.schedule(new TaskSchedulato("arlingue"), linRitardo, linRitardo);//parti dopo x secondi e itera ogni x secondi
            }
            if (lisRitardo > 0) {
                timer.schedule(new TaskSchedulato("arlistini"), lisRitardo, lisRitardo);//parti dopo x secondi e itera ogni x secondi
            }
            if (magRitardo > 0) {
                timer.schedule(new TaskSchedulato("magazzinoesterno"), magRitardo, magRitardo);//parti dopo x secondi e itera ogni x secondi
            }
            if (clearEvery > 0) {
                timer.schedule(new TaskClear(), clearEvery, clearEvery);//parti dopo x secondi e itera ogni x secondi
            }

        }

        public void stop() {
            stop.setBackground(Color.green);
            start.setBackground(Color.white);
            stopped = true;
            stato.setText("Stoppato");
            timer.cancel();
        }
    }

    class Systray {

        public void systrayit() {
            if (!SystemTray.isSupported()) {
                System.out.println("System tray non supportato ");
                return;
            }
            //get the systemTray of the system
            ClassLoader.getSystemResource("pssynchro.png");
            ClassLoader.getSystemResourceAsStream("pssynchro.png");
            SystemTray systemTray = SystemTray.getSystemTray();
            Image image = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/pssynchro.png"));

            //popupmenu
            PopupMenu trayPopupMenu = new PopupMenu();
            //1o menuitem del popupmenu
            MenuItem action = new MenuItem("Apri");
            action.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    setVisible(true);
                }
            });
            trayPopupMenu.add(action);

            //2o menuitem del popupmenu
            MenuItem close = new MenuItem("Esci");
            close.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    System.exit(0);
                }
            });
            trayPopupMenu.add(close);

            //setting tray icon
            TrayIcon trayIcon = new TrayIcon(image, "PSSynchro", trayPopupMenu);
            //adjust to default size as per system recommendation 
            trayIcon.setImageAutoSize(true);

            try {
                systemTray.add(trayIcon);
            } catch (AWTException awtException) {
            }
            MainForm.this.setVisible(false);
        }
    }
}
